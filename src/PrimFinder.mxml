<?xml version="1.0" encoding="utf-8"?>
<s:Application
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark">
	
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import flash.utils.getTimer;
			import flash.utils.setTimeout;
			
			import org.code.vo.Prim;
			import org.code.vo.list.VectorPrimList;
			
			private const primData:Vector.<Prim> = new Vector.<Prim>();
			private const prims:Vector.<uint> = new Vector.<uint>();
			private var lastCalculatedValue:uint;
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				setTimeout(
					function ():void
					{
						trace('stop', arguments.callee);
						removeEventListener(Event.EXIT_FRAME, handleExitFrame);
						updateDisplay(null);
					},
					60000
				);
				
				addEventListener(Event.EXIT_FRAME, handleExitFrame, false, 0, true);
				addEventListener(MouseEvent.CLICK, updateDisplay, false, 0, true);
				lastCalculatedValue = 2;
				prims.push(lastCalculatedValue);
				primData.push(new Prim(0, 2, 0));
				isPrim(++ lastCalculatedValue);

				trace('	WorkerDomain.current:',		WorkerDomain.current);
				trace('	WorkerDomain.isSupported:',	WorkerDomain.isSupported);
				//trace('	WorkerDomain.listWorkers:',	);
				
				if (!WorkerDomain.isSupported)
					return;
				
				const byteArray:ByteArray = new ByteArray();
				
				const workerDomain:WorkerDomain = WorkerDomain.current;
				const worker:Worker = workerDomain.createWorker(byteArray);
				
				trace('	WorkerDomain.listWorkers:',	workerDomain.listWorkers);
				trace('	worker:',	worker);
				
				createWorker();
				
				const workerLoader:URLLoader = new URLLoader();
				workerLoader.dataFormat = URLLoaderDataFormat.BINARY;
				workerLoader.addEventListener(Event.COMPLETE, workerLoadComplete);
				workerLoader.addEventListener(IOErrorEvent.IO_ERROR, workerLoadComplete);
				workerLoader.load(
					new URLRequest(
						"org/code/workers/WorkerTest.swf"
					)
				);
			}
			
			private function workerLoadComplete(event:Event):void
			{
				trace('workerLoadComplete',event.type, event.target);
				if (event.type === IOErrorEvent.IO_ERROR)
					return removeEventListener(Event.EXIT_FRAME, handleExitFrame);
				
				removeEventListener(Event.EXIT_FRAME, handleExitFrame);
				
				Worker.current.setSharedProperty('prims', prims);

				const bgWorkerBytes:ByteArray = event.target.data as ByteArray;
				const noOfWorkers:uint = 8
				var i:uint = noOfWorkers;
				while (i -- > 0)
					createBackgroundWorker(bgWorkerBytes, noOfWorkers - i - 1);
				
				const workers:Vector.<Worker> = WorkerDomain.current.listWorkers();
				i = workers.length
				
				trace('list prims:');
				trace(prims);
				
				while (i -- > 0)
				{
					trace(workers[i].getSharedProperty('prims'));
				}
			}
			
			private function createBackgroundWorker(bgWorkerBytes:ByteArray, creationId:uint):void
			{
				trace('workerLoadComplete	bgWorker init    ','	timer:', getTimer());
				const bgWorker:Worker = WorkerDomain.current.createWorker(bgWorkerBytes);
				bgWorker.addEventListener(Event.WORKER_STATE, handleBgWorkerState, false, 0, true);
				
				bgWorker.setSharedProperty('prims', prims);
				bgWorker.setSharedProperty('workerId',	creationId);
				
				trace('workerLoadComplete	bgWorker starting','	timer:', getTimer());
				bgWorker.start();
				trace('workerLoadComplete	bgWorker started ','	timer:', getTimer());
				
				handleExitFrame()
			}
			
			private function handleBgWorkerState(event:Event):void
			{
				const w:Worker = Worker(event.target);
				trace('		handleBgWorkerState',event.type, w.state,'	timer:', getTimer());
				trace('		list workers:', WorkerDomain.current.listWorkers());
				trace('		list prims:');
				trace(w.getSharedProperty('prims'));
			}
			
			private function handleExitFrame(event:Event = null):void
			{
				const start:uint = getTimer();
				try
				{
//					while(getTimer() - start < 10)
					{
						lastCalculatedValue += 2;
						isPrim(lastCalculatedValue)
						if (lastCalculatedValue == uint.MAX_VALUE)
							removeEventListener(Event.EXIT_FRAME, handleExitFrame);
					}
				}
				catch(e:Error)
				{
					trace(e.getStackTrace())
				}
			}
			
			private function isPrim(x:uint):void
			{
				const sqX:uint = Math.floor(Math.sqrt(x));
				const prims:Vector.<uint> = this.prims;
				var i:uint = 1;
				while (
					i < sqX &&
					x % prims[i] != 0
				)
					++ i;
				if (i >= sqX)
				{
					i = primData.length;
					prims.push(x);
					trace(
						'	i:',i,
						'		v:',x,
						'		d',x - Prim(primData[i - 1]).value - 1,
						'		x',Prim.prevMaxDistance,
						'		c',Prim.prevMaxDistanceCount
					); 
					primData.push(
						new Prim(
							i,
							x, 
							x - primData[i - 1].value - 1
						)
					);
				}
			}
			
			private function updateDisplay(event:Event):void
			{
				list.dataProvider = new VectorPrimList(primData);
			}
			
			private function createWorker():void
			{
				// create the background worker
				trace('createWorker', this.loaderInfo);
				if (!this.loaderInfo)
					return;
				const workerBytes:ByteArray = this.loaderInfo.bytes;
				//const workerBytes:ByteArray = new BgWorkerPrimFinder()// as ByteArray;
				var bgWorker:Worker = WorkerDomain.current.createWorker(workerBytes);
				
				// listen for worker state changes to know when the worker is running
				bgWorker.addEventListener(Event.WORKER_STATE, workerStateHandler);
				
				// set up communication between workers using 
				// setSharedProperty(), createMessageChannel(), etc.
				// ... (not shown)
				
				bgWorker.start();
			}
			
			private function workerStateHandler(event:Event):void
			{
				trace(event.type);
			}
		]]>
	</fx:Script>

	<s:List
		id="list"
		height="100%"
		width="100%"
		>
		<s:itemRenderer>
			<fx:Component>
				<s:ItemRenderer>
					<s:HGroup>
						<s:Label
							id="primId"
							text="{data.id}"
							width="100"
							/>
						<s:Label
							id="primValue"
							text="{data.value}"
							width="100"
							/>
						<s:Label
							id="primDistance"
							text="{data.distance}"
							width="100"
							/>
						<s:Label
							id="primMax"
							text="{data.maxDistance}"
							width="100"
							/>
					</s:HGroup>
				</s:ItemRenderer>
			</fx:Component>
		</s:itemRenderer>
	</s:List>

	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		
	</fx:Style>
</s:Application>
<?xml version="1.0" encoding="utf-8"?>
<s:Application
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark">
	
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import org.code.vo.Prim;
			import org.code.vo.list.VectorList;
			
			private const primData:Vector.<Prim> = new Vector.<Prim>();
			private const prims:Vector.<uint> = new Vector.<uint>();
			private var lastCalculatedValue:uint;
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				addEventListener(Event.EXIT_FRAME, handleExitFrame, false, 0, true);
				addEventListener(MouseEvent.CLICK, updateDisplay, false, 0, true);
				lastCalculatedValue = 2;
				prims.push(lastCalculatedValue);
				primData.push(new Prim(0, 2, 0));
				isPrim(++ lastCalculatedValue);
			}
			
			private function handleExitFrame(event:Event):void
			{
//				const start:uint = getTimer();
//				while(getTimer() - start < 10)
					lastCalculatedValue += 2;
					isPrim(lastCalculatedValue);
					if (lastCalculatedValue == uint.MAX_VALUE)
						removeEventListener(Event.EXIT_FRAME, handleExitFrame);
			}
			
			private function isPrim(x:uint):void
			{
				const sqX:uint = Math.floor(Math.sqrt(x));
				const prims:Vector.<uint> = this.prims;
				var i:uint = 1;
				while (
					i < sqX &&
					x % prims[i] != 0
				)
					++ i;
				if (i >= sqX)
				{
					i = primData.length;
					prims.push(x);
					trace('		i:',i,'		v:',x,'		d',x - primData[i - 1].value); 
					primData.push(
						new Prim(
							i,
							x, 
							x - primData[i - 1].value
						)
					);
				}
			}
			
			private function updateDisplay(event:Event):void
			{
				//list.dataProvider = new VectorUintList(prims);
//				const collection:Vector.<Object> = primData;
				const collection:Vector.<Object> = primData as Vector.<Object>;
				list.dataProvider = new VectorList(
					collection,
					Prim
				);
			}
		]]>
	</fx:Script>

	<s:ListBase
		id="list"
		height="100%"
		width="100%"
		>
		<s:itemRenderer>
			<fx:Component>
				<s:ItemRenderer>
					<s:Label id="nameLabel" text="{data}	{}" top="5" left="5" right="5" />
				</s:ItemRenderer>
			</fx:Component>
		</s:itemRenderer>
	</s:ListBase>

	
</s:Application>
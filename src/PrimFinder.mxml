<?xml version="1.0" encoding="utf-8"?>
<s:Application
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark">
	
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import flash.utils.getTimer;
			import flash.utils.setTimeout;
			
			import org.code.vo.Prim;
			import org.code.workers.Messages;
			import org.code.workers.PrimFinderWorker;
			import org.code.workers.SharedProperties;
			import org.code.workers.WorkerTest;
			
			private static const MEMORY:ByteArray = (
				function ():ByteArray
				{
					const memory:ByteArray = new ByteArray();
					memory.shareable = true;
					memory.clear();
					return memory;
				}
			).call();
			
			private static const NO_OF_CO_WORKERS:uint = 2;
			
			private static const WORKER_PATH:String = 'org/code/workers/';
			private static const FILE_EXTENSION:String = '.swf';
				
			private const txChannels:Vector.<MessageChannel> = new Vector.<MessageChannel>(NO_OF_CO_WORKERS,true);
			private const rxChannels:Vector.<MessageChannel> = new Vector.<MessageChannel>(NO_OF_CO_WORKERS,true);

			private const primData:Vector.<Prim> = new Vector.<Prim>();
			private const prims:Vector.<uint> = new Vector.<uint>();
			private var lastCalculatedValue:uint;
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				setTimeout(
					function ():void
					{
//						trace('stop', arguments.callee);
						removeEventListener(Event.EXIT_FRAME, handleExitFrame);
						updateDisplay(null);
					},
					1+00000
				);
				
				addEventListener(Event.EXIT_FRAME, handleExitFrame, false, 0, true);
				addEventListener(MouseEvent.CLICK, updateDisplay, false, 0, true);
				lastCalculatedValue = 2;
				prims.push(lastCalculatedValue);
				primData.push(new Prim(0, 2, 0));
				isPrim(++ lastCalculatedValue);
			}
			
			private const workersInitialize:Boolean = (
				function ():Boolean
				{
					trace('	WorkerDomain.current:',		WorkerDomain.current);
					trace('	WorkerDomain.isSupported:',	WorkerDomain.isSupported);
					//trace('	WorkerDomain.listWorkers:',	);
					
					if (!WorkerDomain.isSupported)
						return false;
					
					const workerLoader:URLLoader = new URLLoader();
					workerLoader.dataFormat = URLLoaderDataFormat.BINARY;
					
					//workerLoader.addEventListener(Event.COMPLETE, workerLoadComplete, false, 0, true);
					workerLoader.addEventListener(IOErrorEvent.IO_ERROR, workerLoadComplete, false, 0, true);
					
					workerLoader.load(
						new URLRequest(
							WORKER_PATH + WorkerTest.NAME + FILE_EXTENSION
						)
					);
					
					const pfWorkerLoader:URLLoader = new URLLoader();
					pfWorkerLoader.dataFormat = URLLoaderDataFormat.BINARY;
					
					pfWorkerLoader.addEventListener(Event.COMPLETE, pfWorkerLoadComplete, false, 0, true);
					pfWorkerLoader.addEventListener(IOErrorEvent.IO_ERROR, pfWorkerLoadComplete, false, 0, true);
					
					pfWorkerLoader.load(
						new URLRequest(
							WORKER_PATH + PrimFinderWorker.NAME + FILE_EXTENSION
						)
					);
					
					MEMORY.writeUnsignedInt(2);
					MEMORY.writeUnsignedInt(3);
					MEMORY.writeUnsignedInt(5);
					MEMORY.writeUnsignedInt(7);
					nn = 9;
					return true;
				}
			).call(this);
			
			private function pfWorkerLoadComplete(event:Event):void
			{
				if (event.type === IOErrorEvent.IO_ERROR)
					return trace('failed to load pfWorkerLoadComplete');
				
				const bgWorkerBytes:ByteArray = event.target.data;
				
				for (var i:uint = 0; i < PrimFinder.NO_OF_CO_WORKERS; ++ i)
					createBackgroundPFWorker(bgWorkerBytes, i);
			}
			
			private const mainW2BgWChs:Vector.<MessageChannel> = new Vector.<MessageChannel>(NO_OF_CO_WORKERS,true);
			private const bgW2MainWChs:Vector.<MessageChannel> = new Vector.<MessageChannel>(NO_OF_CO_WORKERS,true);
			
			private function createBackgroundPFWorker(bgWorkerBytes:ByteArray, index:uint):void
			{
				const bgWorker:Worker = WorkerDomain.current.createWorker(bgWorkerBytes);
				
				const mainW2BgWCh:MessageChannel = Worker.current.createMessageChannel(bgWorker);
				const bgW2MainWCh:MessageChannel = bgWorker.createMessageChannel(Worker.current);

				mainW2BgWChs[index] = mainW2BgWCh;
				bgW2MainWChs[index] = bgW2MainWCh;
				
				bgWorker.setSharedProperty(SharedProperties.MAIN_2_BG_CH,	mainW2BgWCh);
				bgWorker.setSharedProperty(SharedProperties.BG_2_MAIN_CH,	bgW2MainWCh);
				bgWorker.setSharedProperty(SharedProperties.SHARED_MEMORY,	MEMORY);
				
				bgWorker.addEventListener(Event.WORKER_STATE, handleBgWorkerState, false, 0, true);
				mainW2BgWCh.addEventListener(Event.CHANNEL_STATE, handlePFstateChange, false, 0, true);
				bgW2MainWCh.addEventListener(Event.CHANNEL_STATE, handlePFstateChange, false, 0, true);
				bgW2MainWCh.addEventListener(Event.CHANNEL_MESSAGE, handlePFmsg, false, 0, true);
				
				bgWorker.start();
				
				mainW2BgWCh.send(Messages.R_U_READY);
			}
			
			private var nn:uint;
			private function get nextNumber():uint
			{
				return nn +=2
			}
			
			private var timeout:uint;
//			private var stateId:uint;
			private function handlePFmsg(event:Event):void
			{
				const msgChannel:MessageChannel = MessageChannel(event.target);
				var receive:*;
				var msg:uint = (receive = msgChannel.receive()) as uint;

				if (msg)
					MEMORY.writeUnsignedInt(msg);
				
				if (msgChannel.messageAvailable)
					handlePFmsg(event);
				
				if (timeout > getTimer())
					mainW2BgWChs[bgW2MainWChs.indexOf(msgChannel)].send(nextNumber);
				else if (timeout == 0)
				{
					mainW2BgWChs[bgW2MainWChs.indexOf(msgChannel)].send(nextNumber);
					timeout = getTimer() + 10000;
					trace('	timer start');
				}
				else if (timeout == 1)
					trace('	finished');
				else
				{
					timeout = 1;
					trace('	timer timeOut');
					setTimeout(
						function():void
						{
							trace('	timer stop');
							trace('	found prims, total: ',MEMORY.position >> 2);
							trace('	found prims / core: ',MEMORY.position / NO_OF_CO_WORKERS >> 2);
//							MEMORY.position = 0;
//							while (MEMORY.position < MEMORY.length)
//								trace('*	list	',MEMORY.position >> 2,'\t',MEMORY.readUnsignedInt(),'\t');
						},
						500
					);
					trace('	finished');
				}
			}
			
			private function handlePFstateChange(event:Event):void
			{
				trace(MessageChannel(event.target).state);
			}
			
			private function workerLoadComplete(event:Event):void
			{
				trace('workerLoadComplete',event.type, event.target);
				
				const workerLoader:URLLoader = URLLoader(event.target);
				workerLoader.removeEventListener(Event.COMPLETE, workerLoadComplete);
				workerLoader.removeEventListener(IOErrorEvent.IO_ERROR, workerLoadComplete);
				
				if (event.type === IOErrorEvent.IO_ERROR)
					return removeEventListener(Event.EXIT_FRAME, handleExitFrame);
				
				removeEventListener(Event.EXIT_FRAME, handleExitFrame);
				
				Worker.current.setSharedProperty(SharedProperties.PRIMS, prims);
				
				const bgWorkerBytes:ByteArray = event.target.data;
				const noOfWorkers:uint = PrimFinder.NO_OF_CO_WORKERS;
				var i:uint = noOfWorkers;
				while (i -- > 0)
					createBackgroundWorker(bgWorkerBytes, noOfWorkers - i - 1);
				
				const workers:Vector.<Worker> = WorkerDomain.current.listWorkers();
				i = workers.length
				
				trace('list prims:');
				trace(prims);
				
				while (i -- > 0)
				{
					trace(workers[i].getSharedProperty(SharedProperties.PRIMS));
				}
			}
			
			private function createBackgroundWorker(bgWorkerBytes:ByteArray, creationId:uint):void
			{
				trace('	workerLoadComplete	bgWorker init    ','	timer:', getTimer());
				const bgWorker:Worker = WorkerDomain.current.createWorker(bgWorkerBytes);
				const txCh:MessageChannel = Worker.current.createMessageChannel(bgWorker);
				
				bgWorker.setSharedProperty(SharedProperties.PRIMS, prims);
				bgWorker.setSharedProperty(SharedProperties.WORKER_ID,	creationId);
				bgWorker.setSharedProperty(SharedProperties.RX_CH, txCh);
				
				bgWorker.addEventListener(Event.WORKER_STATE, handleBgWorkerState, false, 0, true);
				
				trace('	bgWorker', creationId, SharedProperties.RX_CH, txCh);
				
				txChannels[creationId] = txCh;
				
				handleExitFrame();
				
				trace('	workerLoadComplete	bgWorker:',creationId,' is starting','	timer:', getTimer());
				bgWorker.start();
				trace('	workerLoadComplete	bgWorker:',creationId,' was started','	timer:', getTimer());
			}

			private function handleBgWorkerState(event:Event):void
			{
				const w:Worker = Worker(event.target);
				
				if (!w.getSharedProperty(SharedProperties.MRX_CH))
					return callLater(handleBgWorkerState, [event]);
				
				trace('		handleBgWorkerState',event.type, w.state,'	timer:', getTimer());
				trace('		list workers:', WorkerDomain.current.listWorkers());
				trace('		list prims:',w.getSharedProperty(SharedProperties.PRIMS));
				trace('		list rxCh:',w.getSharedProperty(SharedProperties.MRX_CH));
				
				const rxCh:MessageChannel = w.getSharedProperty(SharedProperties.MRX_CH);
				rxChannels[w.getSharedProperty(SharedProperties.WORKER_ID)] = rxCh;
				
				try{
					rxCh.addEventListener(Event.CHANNEL_MESSAGE, handleChannelMSG, false, 0, true);
				}
				catch(e:Error)
				{
					trace(e.message,'\n',e.getStackTrace());
				}
				
				txChannels[w.getSharedProperty(SharedProperties.WORKER_ID)].send('start');
				
				setTimeout(
					function ():void
					{
						w.setSharedProperty(SharedProperties.RX_CH, undefined);
						w.setSharedProperty(SharedProperties.MRX_CH, undefined);
						w.setSharedProperty(SharedProperties.PRIMS, undefined);
						w.setSharedProperty(SharedProperties.WORKER_ID, undefined);
					},
					100
				);
				
			}
			
			private function handleChannelMSG(event:Event):void
			{
				const rxCh:MessageChannel = MessageChannel(event.target);
				try{
					const msg:Object = rxCh.receive();
					if (msg is String && this.hasOwnProperty(msg))
						this[msg].call(this);
//					else
//						trace('		mainWorker chMessage:	', msg);
				}
				catch(e:Error)
				{
					trace(e.message,'\n',e.getStackTrace());
				}
				
				txChannels[rxChannels.indexOf(rxCh)].send('start');
			}
			
			private function handleExitFrame(event:Event = null):void
			{
				const start:uint = getTimer();
				try
				{
//					while(getTimer() - start < 10)
					{
						lastCalculatedValue += 2;
						isPrim(lastCalculatedValue)
						if (lastCalculatedValue == uint.MAX_VALUE)
							removeEventListener(Event.EXIT_FRAME, handleExitFrame);
					}
				}
				catch(e:Error)
				{
					trace(e.getStackTrace())
				}
			}
			
			private function isPrim(x:uint):void
			{
				const sqX:uint = Math.floor(Math.sqrt(x));
				const prims:Vector.<uint> = this.prims;
				var i:uint = 1;
				while (
					i < sqX &&
					x % prims[i] != 0
				)
					++ i;
				if (i >= sqX)
				{
					i = primData.length;
					prims.push(x);
					trace(
						'	i:',i,
						'		v:',x,
						'		d',x - Prim(primData[i - 1]).value - 1,
						'		x',Prim.prevMaxDistance,
						'		c',Prim.prevMaxDistanceCount
					); 
					primData.push(
						new Prim(
							i,
							x, 
							x - primData[i - 1].value - 1
						)
					);
				}
			}
			
			private function updateDisplay(event:Event):void
			{
//				list.dataProvider = new VectorPrimList(primData);
			}
			
			private function workerStateHandler(event:Event):void
			{
				trace(event.type);
			}
			
		]]>
	</fx:Script>

	<s:List
		id="list"
		height="100%"
		width="100%"
		>
		<s:itemRenderer>
			<fx:Component>
				<s:ItemRenderer>
					<s:HGroup>
						<s:Label
							id="primId"
							text="{data.id}"
							width="100"
							/>
						<s:Label
							id="primValue"
							text="{data.value}"
							width="100"
							/>
						<s:Label
							id="primDistance"
							text="{data.distance}"
							width="100"
							/>
						<s:Label
							id="primMax"
							text="{data.maxDistance}"
							width="100"
							/>
					</s:HGroup>
				</s:ItemRenderer>
			</fx:Component>
		</s:itemRenderer>
	</s:List>
</s:Application>